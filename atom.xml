<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jarret Moses]]></title>
  <link href="http://jmoses89.github.io/atom.xml" rel="self"/>
  <link href="http://jmoses89.github.io/"/>
  <updated>2014-10-16T09:26:55-04:00</updated>
  <id>http://jmoses89.github.io/</id>
  <author>
    <name><![CDATA[Jarret Moses]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capturing Regexp and Using '$1']]></title>
    <link href="http://jmoses89.github.io/blog/2014/10/15/changing-a-word-into-one-dollar/"/>
    <updated>2014-10-15T19:46:06-04:00</updated>
    <id>http://jmoses89.github.io/blog/2014/10/15/changing-a-word-into-one-dollar</id>
    <content type="html"><![CDATA[<h4>Premise</h4>

<p>Last night I was solving a problem on <a href="www.codewars.com">CodeWars</a> and though I solved it, I came across a solution I found much cooler and decided to write this post about it. The solution used a regular expression with a capture and this funny little character &lsquo;$1&rsquo; which made me want to find out exactly what was going on so I could use it in the future.</p>

<h3>Relevant Regexp Information</h3>

<h4>Capturing vs. Matching</h4>

<p>In regular expressions you can either match or capture an item. Matching a string is merely a &lsquo;yes&rsquo; or &lsquo;no&rsquo; statement where the string either has a match or doesn&rsquo;t and it returns nothing. On the otherhand, capturing takes the matching item and returns that match so you can infact use that match for some other purpose.
<img src="http://jmoses89.github.io/images/match.png">
Match example
<img src="http://jmoses89.github.io/images/capture.png">
Capture example</p>

<p>As you can see in the <a href="www.rubular.com">Rubular</a> match example, it simply matches the substring. However, in the capture example there is a section &lsquo;Match groups&rsquo;, which represents the match which was saved in memory for further use.</p>

<h4>What is this &lsquo;$1&rsquo;?</h4>

<p>The &lsquo;$1&rsquo; is an example of some special global variables withing a ruby RegExp expression. According to the ruby regexp documentation pattern <strong><u>matching</u></strong> sets some global variables</p>

<ul>
<li>$~ is equivalent to ::last_match;</li>
<li>$` contains string before match;</li>
<li>$&lsquo; contains string after match;</li>
<li>$1, $2 and so on contain text matching first, second, etc capture group;</li>
<li>$+ contains last capture group.</li>
</ul>


<h4>Tying it together</h4>

<p>So back to the CodeWars problem&hellip;.this is what was asked.</p>

<blockquote><p>We need a method for parsing an array of strings to see which of 3 categories they fall into:</p></blockquote>

<h5>Rules</h5>

<ol>
<li> :alpha strings contain the word &ldquo;alpha&rdquo;</li>
<li> :beta strings contain the word &ldquo;beta&rdquo;</li>
<li> :unknown strings don&rsquo;t contain either &ldquo;alpha&rdquo; or &ldquo;beta&rdquo;</li>
<li> :unknown is also used for nil entries</li>
<li> No string will contain both &ldquo;alpha&rdquo; and &ldquo;beta&rdquo;</li>
<li> The strings can contain alpha and beta in any case (e.g. &ldquo;Alpha&rdquo;, &ldquo;BeTa&rdquo;)</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;This is an alpha line&quot;</span><span class="p">,</span> <span class="s2">&quot;Beta line next!&quot;</span><span class="p">,</span> <span class="s2">&quot;Another AlphA&quot;</span><span class="p">,</span> <span class="s2">&quot;I have no idea&quot;</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; example input</span>
</span><span class='line'>
</span><span class='line'><span class="n">line_types</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt;  [ :alpha, :beta, :alpha, :unknown, :unknown ] example output</span>
</span></code></pre></td></tr></table></div></figure>


<h5>ORIGINAL SOLUTION</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">line_types</span> <span class="n">lines</span>
</span><span class='line'>  <span class="n">lines</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/alpha/i</span>
</span><span class='line'>      <span class="ss">:alpha</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/beta/i</span>
</span><span class='line'>      <span class="ss">:beta</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="ss">:unknown</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt;  [ :alpha, :beta, :alpha, :unknown, :unknown ]</span>
</span></code></pre></td></tr></table></div></figure>


<h5>NEW SOLUTION</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">line_types</span> <span class="n">lines</span>
</span><span class='line'>  <span class="n">lines</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/(alpha|beta)/i</span> <span class="p">?</span> <span class="vg">$1</span><span class="o">.</span><span class="n">downcase</span><span class="o">.</span><span class="n">to_sym</span> <span class="p">:</span> <span class="ss">:unknown</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt;  [ :alpha, :beta, :alpha, :unknown, :unknown ]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Summary</h4>

<p>While my original solution works perfectly fine, the new solution uses some cooler ruby (in my opinion) by implementing everythign on one line. The method takes an array of lines and runs the .collect method on it. Each &lsquo;line&rsquo; is tested against the regexp /(alpha|beta)/i which is looking for either a alpha substring OR beta substring with the &lsquo;i&rsquo; meaning case-insensitive. Then if this match is found, since it is in capture parenthesis, the matched string is saved and can be accessed by the &lsquo;$1&rsquo; variable. Then all that is down is downcasing and turning it into a symbol as per the rules. If nothing is matched then the :unknown symbol is placed in the return array. Pretty cool stuff.</p>

<h5>Resources</h5>

<ul>
<li>(<a href="http://stackoverflow.com/questions/21200514/regular-expression-matching-vs-capturing">http://stackoverflow.com/questions/21200514/regular-expression-matching-vs-capturing</a>)</li>
<li>(<a href="http://www.ruby-doc.org/core-2.1.1/Regexp.html">http://www.ruby-doc.org/core-2.1.1/Regexp.html</a>)</li>
<li>(<a href="http://stackoverflow.com/questions/288573/1-and-1-in-ruby">http://stackoverflow.com/questions/288573/1-and-1-in-ruby</a>)</li>
<li>(<a href="http://www.rubular.com">http://www.rubular.com</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing Problems and Asking the Right Questions]]></title>
    <link href="http://jmoses89.github.io/blog/2014/10/14/visualize-the-problem/"/>
    <updated>2014-10-14T20:05:26-04:00</updated>
    <id>http://jmoses89.github.io/blog/2014/10/14/visualize-the-problem</id>
    <content type="html"><![CDATA[<h4>Premise</h4>

<p>If you&rsquo;re like me, you&rsquo;ve probably gotten stuck on a problem and after awhile realized that you don&rsquo;t even fully understand what the problem is that you;re trying to solve. This leads to way too much time frustratingly trying to just code your way through it until something finally works. While this may be true sometimes, I&rsquo;ve found that these next steps will help you calmly and collectively solve your problem.</p>

<ol>
<li> Stop what you&rsquo;re doing and take a deep breathe</li>
<li> Ask yourself what is the current problem you are trying to solve</li>
<li> WRITE IT DOWN</li>
<li> Repeat until each ministep is done</li>
</ol>


<h4>What sparked this post?</h4>

<p>While working on the ruby-allergy lab I realized I simply did not understand how binary operators could possibly help me solve this problem. SO&hellip;I decided to ask myself how the values look in binary and I drew a picture to see if anything would click. Sure enough it did&hellip;</p>

<h4>What is a binary number?</h4>

<p>A binary number is simply a representation of an integer using 1&rsquo;s and 0&rsquo;s.
Starting from the right most value (1) every next value is raised to the power of 2</p>

<table>
<thead>
<tr>
<th>  Integer      </th>
<th style="text-align:center;">    Value      </th>
</tr>
</thead>
<tbody>
<tr>
<td>      0        </td>
<td style="text-align:center;">        0      </td>
</tr>
<tr>
<td>      1        </td>
<td style="text-align:center;">        1      </td>
</tr>
<tr>
<td>      2        </td>
<td style="text-align:center;">       10      </td>
</tr>
<tr>
<td>      3        </td>
<td style="text-align:center;">       11      </td>
</tr>
<tr>
<td>      4        </td>
<td style="text-align:center;">      100      </td>
</tr>
<tr>
<td>      8        </td>
<td style="text-align:center;">     1000      </td>
</tr>
<tr>
<td>     16        </td>
<td style="text-align:center;">    10000      </td>
</tr>
<tr>
<td>               </td>
<td style="text-align:center;">               </td>
</tr>
</tbody>
</table>


<p>Every added digit is double the one before it</p>

<h4>Binary operators to know</h4>

<p>&lsquo;&amp;&rsquo; AND operator returns the common binary values between 2 numbers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1001</span>
</span><span class='line'>    <span class="o">&amp;</span>
</span><span class='line'><span class="mi">1101</span>
</span><span class='line'><span class="c1">#=&gt; 1001</span>
</span></code></pre></td></tr></table></div></figure>


<p>&lsquo;^&rsquo; XOR operator returns a value with 1 bits where either value had a 1</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mo">0001</span>
</span><span class='line'>    <span class="o">^</span>
</span><span class='line'><span class="mi">1000</span>
</span><span class='line'><span class="c1">#=&gt; 1001</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the purpose of this problem I only needed the &lsquo;&amp;&rsquo;, but including another definition of a binary operator you can get a better sense of how it works. Additionally the code snippets are not how you would actually use the operators but are setup to give maximum <strong>VISUAL</strong> understanding.</p>

<h4>The Problem to Solve</h4>

<p>The problem to solve is given a allergy score, how do you figure out what allergies you have?</p>

<h4>Tying it all together</h4>

<p>Now that we know the bare minimum of binary and their operators I take a look at the allergy problem. S I ask <strong>&lsquo;Where does this knowledge of binary come into play within the problem?&rsquo;</strong>Upon inspection I realize that each allergy&rsquo;s value reflected a specific binary value that fell perfectly on a power of 2.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;cat&quot;</span> <span class="o">=&gt;</span> <span class="mi">128</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; 10000000 </span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;Pollen&quot;</span> <span class="o">=&gt;</span> <span class="mi">64</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; 01000000</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="s2">&quot;Chocolate&quot;</span> <span class="o">=&gt;</span> <span class="mi">32</span><span class="p">}</span>
</span><span class='line'><span class="c1">#=&gt; 00100000</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s all good and dandy but how does this help me solve the problem? Well quite simply the next question I asked myself is, <strong>&lsquo;What does the binary score of having all allergies look like?&rsquo;</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Binary value of having ALL allergies&quot;</span>
</span><span class='line'><span class="c1">#=&gt; 11111111</span>
</span></code></pre></td></tr></table></div></figure>


<p>From here the pieces start to fall into place. Each spot represents an allergy and a 1 in that spot means that you have the allergy while a 0 means you don&rsquo;t.Thus my minor understanding of binary is all I need becasue I&rsquo;ve turned the problem into a graphical one rather than actully worrying about doing math in binary. The next question I asked was <strong>&lsquo;How does the given allergy score look in binary?&rsquo;</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Score of 509&quot;</span>
</span><span class='line'><span class="c1">#=&gt; 0111111101</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at the binary value I realize that the value is way more than the maximum value of having all allergies. I know the answer is staring me in the face and I don&rsquo;t need to do any kind of complicated math. After writing this all out it hits me. If the &lsquo;&amp;&rsquo; operator returns only values that have 1&rsquo;s in the same spot and I know both the binary scores of the one given and each allergy I can simply compare the given score with each allergy score and if anything greater than 0 returns then the allergy is added.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Comparing 509(given) with 128(cats)&quot;</span>
</span><span class='line'><span class="mo">0111111101</span>
</span><span class='line'>          <span class="o">&amp;</span>
</span><span class='line'><span class="mo">0010000000</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; 10000000 Cat allergy is in the solution </span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;Comparing 509(given) with 2(peanuts)&quot;</span>
</span><span class='line'><span class="mo">0111111101</span>
</span><span class='line'>          <span class="o">&amp;</span>
</span><span class='line'><span class="mo">0000000010</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; 00000000 Peanut allergy is not in the solution     </span>
</span></code></pre></td></tr></table></div></figure>


<p>The only final thing to point out is since the given score of 509 contains more binary values, the score of 128 is the equivalent of having 0 for every other value after that thus the 2 extra 0&rsquo;s after the 128th bit. Adding these zeros help with <strong>VISUAL</strong> clarity.</p>

<h4>FINAL SOLUTION</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#constant hash</span>
</span><span class='line'><span class="no">ALLERGIES</span> <span class="o">=</span>  <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;cats&quot;</span> <span class="o">=&gt;</span> <span class="mi">128</span><span class="p">,</span> <span class="s2">&quot;pollen&quot;</span> <span class="o">=&gt;</span> <span class="mi">64</span><span class="p">,</span> <span class="s2">&quot;chocolate&quot;</span> <span class="o">=&gt;</span> <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;tomatoes&quot;</span> <span class="o">=&gt;</span> <span class="mi">16</span><span class="p">,</span> <span class="s2">&quot;strawberries&quot;</span> <span class="o">=&gt;</span> <span class="mi">8</span><span class="p">,</span> <span class="s2">&quot;shellfish&quot;</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>                <span class="s2">&quot;peanuts&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;eggs&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#find_allergies method</span>
</span><span class='line'><span class="k">def</span> <span class="nf">find_allergies</span>
</span><span class='line'>  <span class="no">ALLERGIES</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">allergy</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">score</span> <span class="o">&amp;</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">allergies</span> <span class="o">&lt;&lt;</span> <span class="n">allergy</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SUMMARY</h4>

<p>We as humans are visual creatures. Sometimes thinking isnt enough and the simple act of writing things down and asking questions about what you&rsquo;ve written down is all you need to solve a problem. So next time you&rsquo;re stuck, draw a picture, not only can it help you but it&rsquo;s fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://jmoses89.github.io/blog/2014/09/30/my-first-post-on-octopress/"/>
    <updated>2014-09-30T21:43:39-04:00</updated>
    <id>http://jmoses89.github.io/blog/2014/09/30/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello, World&rdquo;</p>
]]></content>
  </entry>
  
</feed>
